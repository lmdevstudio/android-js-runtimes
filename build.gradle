group 'io.abner.fastdev.android'
version '0.3.4'

buildscript {
    repositories {
        mavenCentral()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.11.1'
    }
}

rootProject.allprojects {
    repositories {
        google()
        jcenter()
    }
}



subprojects {
    tasks.withType(Test){
        enabled = false
    }

    apply plugin: 'com.android.library'

    apply plugin: 'maven-publish'

    android {


        compileSdkVersion 29
        defaultConfig {
            minSdkVersion 21
        }
        lintOptions {
            disable 'InvalidPackage'
        }


        testOptions {
            unitTests.all {
                enabled false
            }
        }
    }


//    publishing {
//        publications {
//            publication(MavenPublication) {
//                pom {
//                    name = 'Android JS Runtimes'
//
//                }
//
//                afterEvaluate {
//                    artifact bundleReleaseAar
//                }
//
//            }
//        }
//
//        repositories {
//            mavenLocal()
//        }
//
//    }
    publishing {
        publications {
            android.libraryVariants.all { variant ->
               // if (!variant.name.contains("Release")) return

                println("Publishing config ${variant.name} for project ${project.name}...")


                def variantArtifactId = "fastdev-jsruntimes-${project.name}"
                def publicationName = "${project.name}${variant.name.capitalize()}Publication"

                "$publicationName"(MavenPublication) {
                    artifactId variantArtifactId

                    // AAR
                    artifact(variant.outputs[0].packageLibrary)

                    // README.md
                    if (file("$projectDir/README.md").exists()) {
                        artifact("$projectDir/README.md") {
                            classifier "README"
                        }
                    }
//
//                    // JavaDoc
//                    if (file("$buildDir/outputs/javadoc/${artifactId}-javadoc.jar").exists()) {
//                        artifact("$buildDir/outputs/javadoc/${artifactId}-javadoc.jar") {
//                            classifier "javadoc"
//                        }
//                    }

                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        //Iterate over "api" and "implementation" dependencies (we don't want the test ones), adding a <dependency> node for each
                        //The publication doesn't know about our dependencies, so we have to manually add them to the pom
                        configurations.api.allDependencies.findAll {
                            it.name != 'unspecified'
                        }.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                        configurations.implementation.allDependencies.findAll {
                            it.name != 'unspecified'
                        }.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }

                    repositories {
                        mavenLocal()
                    }
                }
            }
        }
    }


}
